"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_1 = require("mongodb");
var CONFIG;
var CLIENT;
var COLLECTIONS = [];
async function startClient(cfg) {
    CONFIG = Object.assign({}, cfg);
    await loadClient();
    for (let db of CONFIG.dbs)
        for (let c of db.collections)
            await loadCollection({ db: db.name, collection: c });
}
exports.startClient = startClient;
async function loadClient() {
    return (CLIENT = await mongodb_1.MongoClient.connect(CONFIG.url, {
        useNewUrlParser: CONFIG.useNewUrlParser,
        useUnifiedTopology: CONFIG.useUnifiedTopology,
    }).catch((err) => {
        console.log(err);
        throw err;
    }));
}
async function loadCollection(config) {
    const dbName = config.db;
    const collectionName = config.collection;
    const client = CLIENT;
    var db;
    var collection;
    try {
        db = await client.db(config.db);
        collection = await db.collection(config.collection);
    }
    catch (e) {
        console.log(e);
        client.close();
        throw e;
    }
    COLLECTIONS.push({ client, db, collection, dbName, collectionName });
}
function getColletion(config) {
    const cfg = COLLECTIONS.find((c) => c.dbName === config.db && c.collectionName === config.collection);
    if (!cfg)
        throw ("Collection " + config.collection + " and db " + config.db + " not found.");
    return cfg;
}
exports.getColletion = getColletion;
function getClient() {
    return CLIENT;
}
exports.getClient = getClient;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZ28uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9tb25nby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFzRDtBQWlCdEQsSUFBSSxNQUFpQixDQUFDO0FBRXRCLElBQUksTUFBbUIsQ0FBQztBQUV4QixJQUFJLFdBQVcsR0FBcUIsRUFBRSxDQUFDO0FBRWhDLEtBQUssVUFBVSxXQUFXLENBQUMsR0FBYztJQUM5QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDaEMsTUFBTSxVQUFVLEVBQUUsQ0FBQztJQUNuQixLQUFLLElBQUksRUFBRSxJQUFJLE1BQU0sQ0FBQyxHQUFHO1FBQ3ZCLEtBQUssSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFdBQVc7WUFDMUIsTUFBTSxjQUFjLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBTkQsa0NBTUM7QUFFRCxLQUFLLFVBQVUsVUFBVTtJQUN2QixPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0scUJBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNyRCxlQUFlLEVBQUUsTUFBTSxDQUFDLGVBQWU7UUFDdkMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLGtCQUFrQjtLQUM5QyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sR0FBRyxDQUFDO0lBQ1osQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNOLENBQUM7QUFFRCxLQUFLLFVBQVUsY0FBYyxDQUFDLE1BRzdCO0lBQ0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUN6QixNQUFNLGNBQWMsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQ3pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN0QixJQUFJLEVBQU0sQ0FBQztJQUNYLElBQUksVUFBc0IsQ0FBQztJQUMzQixJQUFJO1FBQ0YsRUFBRSxHQUFHLE1BQU0sTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEMsVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDckQ7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDZixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZixNQUFNLENBQUMsQ0FBQztLQUNUO0lBRUQsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZFLENBQUM7QUFFRCxTQUFnQixZQUFZLENBQUMsTUFHNUI7SUFDQyxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUMxQixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxjQUFjLEtBQUssTUFBTSxDQUFDLFVBQVUsQ0FDeEUsQ0FBQztJQUNGLElBQUksQ0FBQyxHQUFHO1FBQ04sTUFBTSxDQUNKLGFBQWEsR0FBRyxNQUFNLENBQUMsVUFBVSxHQUFHLFVBQVUsR0FBRyxNQUFNLENBQUMsRUFBRSxHQUFHLGFBQWEsQ0FDM0UsQ0FBQztJQUVKLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQWJELG9DQWFDO0FBRUQsU0FBZ0IsU0FBUztJQUN2QixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRkQsOEJBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb25nb0NsaWVudCwgRGIsIENvbGxlY3Rpb24gfSBmcm9tIFwibW9uZ29kYlwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElDZmdNb25nbyB7XG4gIHVybDogc3RyaW5nO1xuICB1c2VOZXdVcmxQYXJzZXI6IGJvb2xlYW47XG4gIHVzZVVuaWZpZWRUb3BvbG9neTogYm9vbGVhbjtcbiAgZGJzOiB7IG5hbWU6IHN0cmluZzsgY29sbGVjdGlvbnM6IHN0cmluZ1tdIH1bXTtcbn1cblxuaW50ZXJmYWNlIElDZmdDb2xsZWN0aW9uIHtcbiAgY2xpZW50OiBNb25nb0NsaWVudDtcbiAgZGI6IERiO1xuICBjb2xsZWN0aW9uOiBDb2xsZWN0aW9uPGFueT47XG4gIGRiTmFtZTogc3RyaW5nO1xuICBjb2xsZWN0aW9uTmFtZTogc3RyaW5nO1xufVxuXG52YXIgQ09ORklHOiBJQ2ZnTW9uZ287XG5cbnZhciBDTElFTlQ6IE1vbmdvQ2xpZW50O1xuXG52YXIgQ09MTEVDVElPTlM6IElDZmdDb2xsZWN0aW9uW10gPSBbXTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0YXJ0Q2xpZW50KGNmZzogSUNmZ01vbmdvKSB7XG4gIENPTkZJRyA9IE9iamVjdC5hc3NpZ24oe30sIGNmZyk7XG4gIGF3YWl0IGxvYWRDbGllbnQoKTtcbiAgZm9yIChsZXQgZGIgb2YgQ09ORklHLmRicylcbiAgICBmb3IgKGxldCBjIG9mIGRiLmNvbGxlY3Rpb25zKVxuICAgICAgYXdhaXQgbG9hZENvbGxlY3Rpb24oeyBkYjogZGIubmFtZSwgY29sbGVjdGlvbjogYyB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZENsaWVudCgpOiBQcm9taXNlPE1vbmdvQ2xpZW50PiB7XG4gIHJldHVybiAoQ0xJRU5UID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdChDT05GSUcudXJsLCB7XG4gICAgdXNlTmV3VXJsUGFyc2VyOiBDT05GSUcudXNlTmV3VXJsUGFyc2VyLFxuICAgIHVzZVVuaWZpZWRUb3BvbG9neTogQ09ORklHLnVzZVVuaWZpZWRUb3BvbG9neSxcbiAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgdGhyb3cgZXJyO1xuICB9KSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRDb2xsZWN0aW9uKGNvbmZpZzoge1xuICBkYjogc3RyaW5nO1xuICBjb2xsZWN0aW9uOiBzdHJpbmc7XG59KTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IGRiTmFtZSA9IGNvbmZpZy5kYjtcbiAgY29uc3QgY29sbGVjdGlvbk5hbWUgPSBjb25maWcuY29sbGVjdGlvbjtcbiAgY29uc3QgY2xpZW50ID0gQ0xJRU5UO1xuICB2YXIgZGI6IERiO1xuICB2YXIgY29sbGVjdGlvbjogQ29sbGVjdGlvbjtcbiAgdHJ5IHtcbiAgICBkYiA9IGF3YWl0IGNsaWVudC5kYihjb25maWcuZGIpO1xuICAgIGNvbGxlY3Rpb24gPSBhd2FpdCBkYi5jb2xsZWN0aW9uKGNvbmZpZy5jb2xsZWN0aW9uKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUubG9nKGUpO1xuICAgIGNsaWVudC5jbG9zZSgpO1xuICAgIHRocm93IGU7XG4gIH1cblxuICBDT0xMRUNUSU9OUy5wdXNoKHsgY2xpZW50LCBkYiwgY29sbGVjdGlvbiwgZGJOYW1lLCBjb2xsZWN0aW9uTmFtZSB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbGxldGlvbihjb25maWc6IHtcbiAgZGI6IHN0cmluZztcbiAgY29sbGVjdGlvbjogc3RyaW5nO1xufSk6IElDZmdDb2xsZWN0aW9uIHtcbiAgY29uc3QgY2ZnID0gQ09MTEVDVElPTlMuZmluZChcbiAgICAoYykgPT4gYy5kYk5hbWUgPT09IGNvbmZpZy5kYiAmJiBjLmNvbGxlY3Rpb25OYW1lID09PSBjb25maWcuY29sbGVjdGlvblxuICApO1xuICBpZiAoIWNmZylcbiAgICB0aHJvdyAoXG4gICAgICBcIkNvbGxlY3Rpb24gXCIgKyBjb25maWcuY29sbGVjdGlvbiArIFwiIGFuZCBkYiBcIiArIGNvbmZpZy5kYiArIFwiIG5vdCBmb3VuZC5cIlxuICAgICk7XG5cbiAgcmV0dXJuIGNmZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENsaWVudCgpIHtcbiAgcmV0dXJuIENMSUVOVDtcbn1cbiJdfQ==