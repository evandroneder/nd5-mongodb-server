"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongo_1 = require("./mongo");
const fs_1 = require("fs");
const express_1 = __importDefault(require("express"));
const body_parser_1 = __importDefault(require("body-parser"));
const cors_1 = __importDefault(require("cors"));
const defaultPort = process.env.PORT || 3000;
const app = express_1.default();
app.use(cors_1.default());
app.use(body_parser_1.default.json({ type: "application/*+json" }));
app.use(body_parser_1.default.json());
async function StartServer(config) {
    await mongo_1.startClient(config.mongoDB);
    const port = Number(config.port || defaultPort);
    app.use((req, res, next) => {
        if (config.middleWare)
            config.middleWare(req, res, next);
        else
            next();
    });
    if (config.staticPath) {
        app.use(express_1.default.static(config.staticPath));
    }
    await processRoutePath(config.controllersPath);
    const server = app.listen(port, () => {
        console.log(`server is listening on ${port}`);
    });
    if (config.socketServer) {
        const io = require("socket.io").listen(server);
        config.socketServer(io);
        console.log("Socket activated.");
    }
}
exports.StartServer = StartServer;
async function processRoutePath(routerPath) {
    fs_1.readdirSync(routerPath).forEach(async (file) => {
        const filePath = routerPath + "/" + file;
        if (file.indexOf(".map") === -1) {
            const name = file.split(".")[0];
            console.log("Loading route: " + name);
            app.use("/" + name, require(filePath));
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsbUNBQWlEO0FBQ2pELDJCQUFpQztBQUNqQyxzREFBOEI7QUFDOUIsOERBQXFDO0FBQ3JDLGdEQUF3QjtBQUN4QixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7QUFDN0MsTUFBTSxHQUFHLEdBQUcsaUJBQU8sRUFBRSxDQUFDO0FBRXRCLEdBQUcsQ0FBQyxHQUFHLENBQUMsY0FBSSxFQUFFLENBQUMsQ0FBQztBQUNoQixHQUFHLENBQUMsR0FBRyxDQUFDLHFCQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3pELEdBQUcsQ0FBQyxHQUFHLENBQUMscUJBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRXBCLEtBQUssVUFBVSxXQUFXLENBQUMsTUFPakM7SUFDQyxNQUFNLG1CQUFXLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRWxDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQyxDQUFDO0lBRWhELEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFRLEVBQUUsR0FBUSxFQUFFLElBQWdCLEVBQUUsRUFBRTtRQUMvQyxJQUFJLE1BQU0sQ0FBQyxVQUFVO1lBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDOztZQUNwRCxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO1FBQ3JCLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7S0FDNUM7SUFFRCxNQUFNLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUUvQyxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUU7UUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNoRCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksTUFBTSxDQUFDLFlBQVksRUFBRTtRQUN2QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBQ2xDO0FBQ0gsQ0FBQztBQWhDRCxrQ0FnQ0M7QUFFRCxLQUFLLFVBQVUsZ0JBQWdCLENBQUMsVUFBa0I7SUFDaEQsZ0JBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQzdDLE1BQU0sUUFBUSxHQUFHLFVBQVUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ3pDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUMvQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLENBQUM7WUFDdEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNmZ01vbmdvLCBzdGFydENsaWVudCB9IGZyb20gXCIuL21vbmdvXCI7XG5pbXBvcnQgeyByZWFkZGlyU3luYyB9IGZyb20gXCJmc1wiO1xuaW1wb3J0IGV4cHJlc3MgZnJvbSBcImV4cHJlc3NcIjtcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gXCJib2R5LXBhcnNlclwiO1xuaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcbmNvbnN0IGRlZmF1bHRQb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG5hcHAudXNlKGNvcnMoKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbih7IHR5cGU6IFwiYXBwbGljYXRpb24vKitqc29uXCIgfSkpO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBTdGFydFNlcnZlcihjb25maWc6IHtcbiAgbWlkZGxlV2FyZT86IChyZXE6IGFueSwgcmVzOiBhbnksIG5leHQ6ICgpID0+IHZvaWQpID0+IHZvaWQ7XG4gIHN0YXRpY1BhdGg/OiBzdHJpbmc7XG4gIHBvcnQ/OiBudW1iZXI7XG4gIGNvbnRyb2xsZXJzUGF0aDogc3RyaW5nO1xuICBtb25nb0RCOiBJQ2ZnTW9uZ287XG4gIHNvY2tldFNlcnZlcjogKGlvOiBTb2NrZXRJTy5TZXJ2ZXIpID0+IHZvaWQ7XG59KSB7XG4gIGF3YWl0IHN0YXJ0Q2xpZW50KGNvbmZpZy5tb25nb0RCKTtcblxuICBjb25zdCBwb3J0ID0gTnVtYmVyKGNvbmZpZy5wb3J0IHx8IGRlZmF1bHRQb3J0KTtcblxuICBhcHAudXNlKChyZXE6IGFueSwgcmVzOiBhbnksIG5leHQ6ICgpID0+IHZvaWQpID0+IHtcbiAgICBpZiAoY29uZmlnLm1pZGRsZVdhcmUpIGNvbmZpZy5taWRkbGVXYXJlKHJlcSwgcmVzLCBuZXh0KTtcbiAgICBlbHNlIG5leHQoKTtcbiAgfSk7XG5cbiAgaWYgKGNvbmZpZy5zdGF0aWNQYXRoKSB7XG4gICAgYXBwLnVzZShleHByZXNzLnN0YXRpYyhjb25maWcuc3RhdGljUGF0aCkpO1xuICB9XG5cbiAgYXdhaXQgcHJvY2Vzc1JvdXRlUGF0aChjb25maWcuY29udHJvbGxlcnNQYXRoKTtcblxuICBjb25zdCBzZXJ2ZXIgPSBhcHAubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgc2VydmVyIGlzIGxpc3RlbmluZyBvbiAke3BvcnR9YCk7XG4gIH0pO1xuXG4gIGlmIChjb25maWcuc29ja2V0U2VydmVyKSB7XG4gICAgY29uc3QgaW8gPSByZXF1aXJlKFwic29ja2V0LmlvXCIpLmxpc3RlbihzZXJ2ZXIpO1xuICAgIGNvbmZpZy5zb2NrZXRTZXJ2ZXIoaW8pO1xuICAgIGNvbnNvbGUubG9nKFwiU29ja2V0IGFjdGl2YXRlZC5cIik7XG4gIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc1JvdXRlUGF0aChyb3V0ZXJQYXRoOiBzdHJpbmcpIHtcbiAgcmVhZGRpclN5bmMocm91dGVyUGF0aCkuZm9yRWFjaChhc3luYyAoZmlsZSkgPT4ge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gcm91dGVyUGF0aCArIFwiL1wiICsgZmlsZTtcbiAgICBpZiAoZmlsZS5pbmRleE9mKFwiLm1hcFwiKSA9PT0gLTEpIHtcbiAgICAgIGNvbnN0IG5hbWUgPSBmaWxlLnNwbGl0KFwiLlwiKVswXTtcbiAgICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyByb3V0ZTogXCIgKyBuYW1lKTtcbiAgICAgIGFwcC51c2UoXCIvXCIgKyBuYW1lLCByZXF1aXJlKGZpbGVQYXRoKSk7XG4gICAgfVxuICB9KTtcbn1cbiJdfQ==